Visualizations!!
%svg.chart
%audio#jp_audio_i{src:"http://localhost:9292/stream/22"}
 
:javascript
  window.onload = function() {
    var w=10, barHeight=20, h=100;
    
    var ctx = new AudioContext();
    var audio = $("audio#jp_audio_i")[0];
    var audioSrc = ctx.createMediaElementSource(audio);
    var analyser = ctx.createAnalyser();
    // we have to connect the MediaElementSource with the analyser 
    audioSrc.connect(analyser);
    audioSrc.connect(ctx.destination);
    // we could configure the analyser: e.g. analyser.fftSize (for further infos read the spec)
   
    // frequencyBinCount tells you how many values you'll receive from the analyser
    var data = new Uint8Array(analyser.frequencyBinCount);
    var chart = d3.select(".chart")
        .attr("width", 420)
        .attr("height", 2 * 1024);
   
    // we're ready to receive some data!
    // loop
    function renderFrame() {
      analyser.getByteFrequencyData(data);

      //var data = [4, 8, 15, 16, 23, 42];

      var width = 420,
          barHeight = 2;

      var x = d3.scale.linear()
          .domain([0, d3.max(data)])
          .range([0, width]);

      chart.selectAll("g").remove();

      var bar = chart.selectAll("g")
          .data(data)
        .enter().append("g")
          .attr("transform", function(d, i) { return "translate(0," + i * barHeight + ")"; });


      bar.append("rect")
          .attr("width", x)
          .attr("height", barHeight);

      window.setTimeout(function() {requestAnimationFrame(renderFrame);}, 50);

       // update data in frequencyData
       // render frame based on values in frequencyData
       // console.log(frequencyData)
    }
    audio.play();
    //renderFrame();
    window.setTimeout(function() {requestAnimationFrame(renderFrame);}, 50);
  };
